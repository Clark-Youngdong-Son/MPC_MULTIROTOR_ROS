// Generated by gencpp from file mpc_icra/Attitude.msg
// DO NOT EDIT!


#ifndef MPC_ICRA_MESSAGE_ATTITUDE_H
#define MPC_ICRA_MESSAGE_ATTITUDE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mpc_icra
{
template <class ContainerAllocator>
struct Attitude_
{
  typedef Attitude_<ContainerAllocator> Type;

  Attitude_()
    : t_now(0.0)
    , roll_d(0.0)
    , pitch_d(0.0)
    , yaw_d(0.0)
    , p_d(0.0)
    , q_d(0.0)
    , r_d(0.0)
    , z_old(0.0)
    , z_d(0.0)
    , z_dot_old(0.0)
    , z_dot_d(0.0)  {
    }
  Attitude_(const ContainerAllocator& _alloc)
    : t_now(0.0)
    , roll_d(0.0)
    , pitch_d(0.0)
    , yaw_d(0.0)
    , p_d(0.0)
    , q_d(0.0)
    , r_d(0.0)
    , z_old(0.0)
    , z_d(0.0)
    , z_dot_old(0.0)
    , z_dot_d(0.0)  {
  (void)_alloc;
    }



   typedef double _t_now_type;
  _t_now_type t_now;

   typedef double _roll_d_type;
  _roll_d_type roll_d;

   typedef double _pitch_d_type;
  _pitch_d_type pitch_d;

   typedef double _yaw_d_type;
  _yaw_d_type yaw_d;

   typedef double _p_d_type;
  _p_d_type p_d;

   typedef double _q_d_type;
  _q_d_type q_d;

   typedef double _r_d_type;
  _r_d_type r_d;

   typedef double _z_old_type;
  _z_old_type z_old;

   typedef double _z_d_type;
  _z_d_type z_d;

   typedef double _z_dot_old_type;
  _z_dot_old_type z_dot_old;

   typedef double _z_dot_d_type;
  _z_dot_d_type z_dot_d;




  typedef boost::shared_ptr< ::mpc_icra::Attitude_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mpc_icra::Attitude_<ContainerAllocator> const> ConstPtr;

}; // struct Attitude_

typedef ::mpc_icra::Attitude_<std::allocator<void> > Attitude;

typedef boost::shared_ptr< ::mpc_icra::Attitude > AttitudePtr;
typedef boost::shared_ptr< ::mpc_icra::Attitude const> AttitudeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mpc_icra::Attitude_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mpc_icra::Attitude_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mpc_icra

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'mpc_icra': ['/home/youngdong/ROS/MPC_Multirotor_ROS/src/mpc_icra/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mpc_icra::Attitude_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mpc_icra::Attitude_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mpc_icra::Attitude_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mpc_icra::Attitude_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mpc_icra::Attitude_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mpc_icra::Attitude_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mpc_icra::Attitude_<ContainerAllocator> >
{
  static const char* value()
  {
    return "157ec3ce1e65802d81d0f3d7eae23348";
  }

  static const char* value(const ::mpc_icra::Attitude_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x157ec3ce1e65802dULL;
  static const uint64_t static_value2 = 0x81d0f3d7eae23348ULL;
};

template<class ContainerAllocator>
struct DataType< ::mpc_icra::Attitude_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mpc_icra/Attitude";
  }

  static const char* value(const ::mpc_icra::Attitude_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mpc_icra::Attitude_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 t_now\n\
float64 roll_d\n\
float64 pitch_d\n\
float64 yaw_d\n\
float64 p_d\n\
float64 q_d\n\
float64 r_d\n\
float64 z_old\n\
float64 z_d\n\
float64 z_dot_old\n\
float64 z_dot_d\n\
";
  }

  static const char* value(const ::mpc_icra::Attitude_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mpc_icra::Attitude_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.t_now);
      stream.next(m.roll_d);
      stream.next(m.pitch_d);
      stream.next(m.yaw_d);
      stream.next(m.p_d);
      stream.next(m.q_d);
      stream.next(m.r_d);
      stream.next(m.z_old);
      stream.next(m.z_d);
      stream.next(m.z_dot_old);
      stream.next(m.z_dot_d);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Attitude_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mpc_icra::Attitude_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mpc_icra::Attitude_<ContainerAllocator>& v)
  {
    s << indent << "t_now: ";
    Printer<double>::stream(s, indent + "  ", v.t_now);
    s << indent << "roll_d: ";
    Printer<double>::stream(s, indent + "  ", v.roll_d);
    s << indent << "pitch_d: ";
    Printer<double>::stream(s, indent + "  ", v.pitch_d);
    s << indent << "yaw_d: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_d);
    s << indent << "p_d: ";
    Printer<double>::stream(s, indent + "  ", v.p_d);
    s << indent << "q_d: ";
    Printer<double>::stream(s, indent + "  ", v.q_d);
    s << indent << "r_d: ";
    Printer<double>::stream(s, indent + "  ", v.r_d);
    s << indent << "z_old: ";
    Printer<double>::stream(s, indent + "  ", v.z_old);
    s << indent << "z_d: ";
    Printer<double>::stream(s, indent + "  ", v.z_d);
    s << indent << "z_dot_old: ";
    Printer<double>::stream(s, indent + "  ", v.z_dot_old);
    s << indent << "z_dot_d: ";
    Printer<double>::stream(s, indent + "  ", v.z_dot_d);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MPC_ICRA_MESSAGE_ATTITUDE_H
