// Generated by gencpp from file mpc_icra/Gain.msg
// DO NOT EDIT!


#ifndef MPC_ICRA_MESSAGE_GAIN_H
#define MPC_ICRA_MESSAGE_GAIN_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mpc_icra
{
template <class ContainerAllocator>
struct Gain_
{
  typedef Gain_<ContainerAllocator> Type;

  Gain_()
    : u_norm()
    , ff_coeff(0.0)
    , x()
    , x_d()
    , K()
    , l()  {
    }
  Gain_(const ContainerAllocator& _alloc)
    : u_norm(_alloc)
    , ff_coeff(0.0)
    , x(_alloc)
    , x_d(_alloc)
    , K(_alloc)
    , l(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _u_norm_type;
  _u_norm_type u_norm;

   typedef double _ff_coeff_type;
  _ff_coeff_type ff_coeff;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _x_type;
  _x_type x;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _x_d_type;
  _x_d_type x_d;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _K_type;
  _K_type K;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _l_type;
  _l_type l;




  typedef boost::shared_ptr< ::mpc_icra::Gain_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mpc_icra::Gain_<ContainerAllocator> const> ConstPtr;

}; // struct Gain_

typedef ::mpc_icra::Gain_<std::allocator<void> > Gain;

typedef boost::shared_ptr< ::mpc_icra::Gain > GainPtr;
typedef boost::shared_ptr< ::mpc_icra::Gain const> GainConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mpc_icra::Gain_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mpc_icra::Gain_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mpc_icra

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'mpc_icra': ['/home/youngdong/ROS/MPC_Multirotor_ROS/src/mpc_icra/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mpc_icra::Gain_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mpc_icra::Gain_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mpc_icra::Gain_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mpc_icra::Gain_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mpc_icra::Gain_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mpc_icra::Gain_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mpc_icra::Gain_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e248040a4f4128ffdaae1c5e3553d25b";
  }

  static const char* value(const ::mpc_icra::Gain_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe248040a4f4128ffULL;
  static const uint64_t static_value2 = 0xdaae1c5e3553d25bULL;
};

template<class ContainerAllocator>
struct DataType< ::mpc_icra::Gain_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mpc_icra/Gain";
  }

  static const char* value(const ::mpc_icra::Gain_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mpc_icra::Gain_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] u_norm\n\
float64   ff_coeff\n\
float64[] x\n\
float64[] x_d\n\
float64[] K\n\
float64[] l\n\
";
  }

  static const char* value(const ::mpc_icra::Gain_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mpc_icra::Gain_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.u_norm);
      stream.next(m.ff_coeff);
      stream.next(m.x);
      stream.next(m.x_d);
      stream.next(m.K);
      stream.next(m.l);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Gain_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mpc_icra::Gain_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mpc_icra::Gain_<ContainerAllocator>& v)
  {
    s << indent << "u_norm[]" << std::endl;
    for (size_t i = 0; i < v.u_norm.size(); ++i)
    {
      s << indent << "  u_norm[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.u_norm[i]);
    }
    s << indent << "ff_coeff: ";
    Printer<double>::stream(s, indent + "  ", v.ff_coeff);
    s << indent << "x[]" << std::endl;
    for (size_t i = 0; i < v.x.size(); ++i)
    {
      s << indent << "  x[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.x[i]);
    }
    s << indent << "x_d[]" << std::endl;
    for (size_t i = 0; i < v.x_d.size(); ++i)
    {
      s << indent << "  x_d[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.x_d[i]);
    }
    s << indent << "K[]" << std::endl;
    for (size_t i = 0; i < v.K.size(); ++i)
    {
      s << indent << "  K[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.K[i]);
    }
    s << indent << "l[]" << std::endl;
    for (size_t i = 0; i < v.l.size(); ++i)
    {
      s << indent << "  l[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.l[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MPC_ICRA_MESSAGE_GAIN_H
