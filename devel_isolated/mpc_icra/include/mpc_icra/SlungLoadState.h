// Generated by gencpp from file mpc_icra/SlungLoadState.msg
// DO NOT EDIT!


#ifndef MPC_ICRA_MESSAGE_SLUNGLOADSTATE_H
#define MPC_ICRA_MESSAGE_SLUNGLOADSTATE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mpc_icra
{
template <class ContainerAllocator>
struct SlungLoadState_
{
  typedef SlungLoadState_<ContainerAllocator> Type;

  SlungLoadState_()
    : x_L(0.0)
    , y_L(0.0)
    , z_L(0.0)
    , roll_Q(0.0)
    , pitch_Q(0.0)
    , yaw_Q(0.0)
    , p_x(0.0)
    , p_y(0.0)
    , p_z(0.0)
    , vx_L(0.0)
    , vy_L(0.0)
    , vz_L(0.0)
    , p_Q(0.0)
    , q_Q(0.0)
    , r_Q(0.0)
    , w_x(0.0)
    , w_y(0.0)
    , w_z(0.0)
    , length(0.0)  {
    }
  SlungLoadState_(const ContainerAllocator& _alloc)
    : x_L(0.0)
    , y_L(0.0)
    , z_L(0.0)
    , roll_Q(0.0)
    , pitch_Q(0.0)
    , yaw_Q(0.0)
    , p_x(0.0)
    , p_y(0.0)
    , p_z(0.0)
    , vx_L(0.0)
    , vy_L(0.0)
    , vz_L(0.0)
    , p_Q(0.0)
    , q_Q(0.0)
    , r_Q(0.0)
    , w_x(0.0)
    , w_y(0.0)
    , w_z(0.0)
    , length(0.0)  {
  (void)_alloc;
    }



   typedef double _x_L_type;
  _x_L_type x_L;

   typedef double _y_L_type;
  _y_L_type y_L;

   typedef double _z_L_type;
  _z_L_type z_L;

   typedef double _roll_Q_type;
  _roll_Q_type roll_Q;

   typedef double _pitch_Q_type;
  _pitch_Q_type pitch_Q;

   typedef double _yaw_Q_type;
  _yaw_Q_type yaw_Q;

   typedef double _p_x_type;
  _p_x_type p_x;

   typedef double _p_y_type;
  _p_y_type p_y;

   typedef double _p_z_type;
  _p_z_type p_z;

   typedef double _vx_L_type;
  _vx_L_type vx_L;

   typedef double _vy_L_type;
  _vy_L_type vy_L;

   typedef double _vz_L_type;
  _vz_L_type vz_L;

   typedef double _p_Q_type;
  _p_Q_type p_Q;

   typedef double _q_Q_type;
  _q_Q_type q_Q;

   typedef double _r_Q_type;
  _r_Q_type r_Q;

   typedef double _w_x_type;
  _w_x_type w_x;

   typedef double _w_y_type;
  _w_y_type w_y;

   typedef double _w_z_type;
  _w_z_type w_z;

   typedef double _length_type;
  _length_type length;




  typedef boost::shared_ptr< ::mpc_icra::SlungLoadState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mpc_icra::SlungLoadState_<ContainerAllocator> const> ConstPtr;

}; // struct SlungLoadState_

typedef ::mpc_icra::SlungLoadState_<std::allocator<void> > SlungLoadState;

typedef boost::shared_ptr< ::mpc_icra::SlungLoadState > SlungLoadStatePtr;
typedef boost::shared_ptr< ::mpc_icra::SlungLoadState const> SlungLoadStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mpc_icra::SlungLoadState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mpc_icra::SlungLoadState_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mpc_icra

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'mpc_icra': ['/home/youngdong/ROS/MPC_Multirotor_ROS/src/mpc_icra/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mpc_icra::SlungLoadState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mpc_icra::SlungLoadState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mpc_icra::SlungLoadState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mpc_icra::SlungLoadState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mpc_icra::SlungLoadState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mpc_icra::SlungLoadState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mpc_icra::SlungLoadState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "97bc3c3aa03d65fdd8a0c94470ad4ac7";
  }

  static const char* value(const ::mpc_icra::SlungLoadState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x97bc3c3aa03d65fdULL;
  static const uint64_t static_value2 = 0xd8a0c94470ad4ac7ULL;
};

template<class ContainerAllocator>
struct DataType< ::mpc_icra::SlungLoadState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mpc_icra/SlungLoadState";
  }

  static const char* value(const ::mpc_icra::SlungLoadState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mpc_icra::SlungLoadState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x_L\n\
float64 y_L\n\
float64 z_L\n\
float64 roll_Q\n\
float64 pitch_Q\n\
float64 yaw_Q\n\
float64 p_x\n\
float64 p_y\n\
float64 p_z\n\
float64 vx_L\n\
float64 vy_L\n\
float64 vz_L\n\
float64 p_Q\n\
float64 q_Q\n\
float64 r_Q\n\
float64 w_x\n\
float64 w_y\n\
float64 w_z\n\
float64 length\n\
";
  }

  static const char* value(const ::mpc_icra::SlungLoadState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mpc_icra::SlungLoadState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_L);
      stream.next(m.y_L);
      stream.next(m.z_L);
      stream.next(m.roll_Q);
      stream.next(m.pitch_Q);
      stream.next(m.yaw_Q);
      stream.next(m.p_x);
      stream.next(m.p_y);
      stream.next(m.p_z);
      stream.next(m.vx_L);
      stream.next(m.vy_L);
      stream.next(m.vz_L);
      stream.next(m.p_Q);
      stream.next(m.q_Q);
      stream.next(m.r_Q);
      stream.next(m.w_x);
      stream.next(m.w_y);
      stream.next(m.w_z);
      stream.next(m.length);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SlungLoadState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mpc_icra::SlungLoadState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mpc_icra::SlungLoadState_<ContainerAllocator>& v)
  {
    s << indent << "x_L: ";
    Printer<double>::stream(s, indent + "  ", v.x_L);
    s << indent << "y_L: ";
    Printer<double>::stream(s, indent + "  ", v.y_L);
    s << indent << "z_L: ";
    Printer<double>::stream(s, indent + "  ", v.z_L);
    s << indent << "roll_Q: ";
    Printer<double>::stream(s, indent + "  ", v.roll_Q);
    s << indent << "pitch_Q: ";
    Printer<double>::stream(s, indent + "  ", v.pitch_Q);
    s << indent << "yaw_Q: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_Q);
    s << indent << "p_x: ";
    Printer<double>::stream(s, indent + "  ", v.p_x);
    s << indent << "p_y: ";
    Printer<double>::stream(s, indent + "  ", v.p_y);
    s << indent << "p_z: ";
    Printer<double>::stream(s, indent + "  ", v.p_z);
    s << indent << "vx_L: ";
    Printer<double>::stream(s, indent + "  ", v.vx_L);
    s << indent << "vy_L: ";
    Printer<double>::stream(s, indent + "  ", v.vy_L);
    s << indent << "vz_L: ";
    Printer<double>::stream(s, indent + "  ", v.vz_L);
    s << indent << "p_Q: ";
    Printer<double>::stream(s, indent + "  ", v.p_Q);
    s << indent << "q_Q: ";
    Printer<double>::stream(s, indent + "  ", v.q_Q);
    s << indent << "r_Q: ";
    Printer<double>::stream(s, indent + "  ", v.r_Q);
    s << indent << "w_x: ";
    Printer<double>::stream(s, indent + "  ", v.w_x);
    s << indent << "w_y: ";
    Printer<double>::stream(s, indent + "  ", v.w_y);
    s << indent << "w_z: ";
    Printer<double>::stream(s, indent + "  ", v.w_z);
    s << indent << "length: ";
    Printer<double>::stream(s, indent + "  ", v.length);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MPC_ICRA_MESSAGE_SLUNGLOADSTATE_H
