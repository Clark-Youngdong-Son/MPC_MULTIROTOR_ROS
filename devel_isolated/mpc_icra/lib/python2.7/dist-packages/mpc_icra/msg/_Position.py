# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mpc_icra/Position.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Position(genpy.Message):
  _md5sum = "bc5e5e90a3332062f5304763ca861e01"
  _type = "mpc_icra/Position"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 x_d
float64 y_d
float64 z_d
float64 vx_d
float64 vy_d
float64 vz_d
float64 psi_d
float64 psi_dot_d
"""
  __slots__ = ['x_d','y_d','z_d','vx_d','vy_d','vz_d','psi_d','psi_dot_d']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x_d,y_d,z_d,vx_d,vy_d,vz_d,psi_d,psi_dot_d

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Position, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.x_d is None:
        self.x_d = 0.
      if self.y_d is None:
        self.y_d = 0.
      if self.z_d is None:
        self.z_d = 0.
      if self.vx_d is None:
        self.vx_d = 0.
      if self.vy_d is None:
        self.vy_d = 0.
      if self.vz_d is None:
        self.vz_d = 0.
      if self.psi_d is None:
        self.psi_d = 0.
      if self.psi_dot_d is None:
        self.psi_dot_d = 0.
    else:
      self.x_d = 0.
      self.y_d = 0.
      self.z_d = 0.
      self.vx_d = 0.
      self.vy_d = 0.
      self.vz_d = 0.
      self.psi_d = 0.
      self.psi_dot_d = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_8d.pack(_x.x_d, _x.y_d, _x.z_d, _x.vx_d, _x.vy_d, _x.vz_d, _x.psi_d, _x.psi_dot_d))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 64
      (_x.x_d, _x.y_d, _x.z_d, _x.vx_d, _x.vy_d, _x.vz_d, _x.psi_d, _x.psi_dot_d,) = _struct_8d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_8d.pack(_x.x_d, _x.y_d, _x.z_d, _x.vx_d, _x.vy_d, _x.vz_d, _x.psi_d, _x.psi_dot_d))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 64
      (_x.x_d, _x.y_d, _x.z_d, _x.vx_d, _x.vy_d, _x.vz_d, _x.psi_d, _x.psi_dot_d,) = _struct_8d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_8d = struct.Struct("<8d")
