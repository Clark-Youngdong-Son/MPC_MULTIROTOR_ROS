# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mpc_icra/SlungLoadState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SlungLoadState(genpy.Message):
  _md5sum = "97bc3c3aa03d65fdd8a0c94470ad4ac7"
  _type = "mpc_icra/SlungLoadState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float64 x_L
float64 y_L
float64 z_L
float64 roll_Q
float64 pitch_Q
float64 yaw_Q
float64 p_x
float64 p_y
float64 p_z
float64 vx_L
float64 vy_L
float64 vz_L
float64 p_Q
float64 q_Q
float64 r_Q
float64 w_x
float64 w_y
float64 w_z
float64 length
"""
  __slots__ = ['x_L','y_L','z_L','roll_Q','pitch_Q','yaw_Q','p_x','p_y','p_z','vx_L','vy_L','vz_L','p_Q','q_Q','r_Q','w_x','w_y','w_z','length']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x_L,y_L,z_L,roll_Q,pitch_Q,yaw_Q,p_x,p_y,p_z,vx_L,vy_L,vz_L,p_Q,q_Q,r_Q,w_x,w_y,w_z,length

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SlungLoadState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.x_L is None:
        self.x_L = 0.
      if self.y_L is None:
        self.y_L = 0.
      if self.z_L is None:
        self.z_L = 0.
      if self.roll_Q is None:
        self.roll_Q = 0.
      if self.pitch_Q is None:
        self.pitch_Q = 0.
      if self.yaw_Q is None:
        self.yaw_Q = 0.
      if self.p_x is None:
        self.p_x = 0.
      if self.p_y is None:
        self.p_y = 0.
      if self.p_z is None:
        self.p_z = 0.
      if self.vx_L is None:
        self.vx_L = 0.
      if self.vy_L is None:
        self.vy_L = 0.
      if self.vz_L is None:
        self.vz_L = 0.
      if self.p_Q is None:
        self.p_Q = 0.
      if self.q_Q is None:
        self.q_Q = 0.
      if self.r_Q is None:
        self.r_Q = 0.
      if self.w_x is None:
        self.w_x = 0.
      if self.w_y is None:
        self.w_y = 0.
      if self.w_z is None:
        self.w_z = 0.
      if self.length is None:
        self.length = 0.
    else:
      self.x_L = 0.
      self.y_L = 0.
      self.z_L = 0.
      self.roll_Q = 0.
      self.pitch_Q = 0.
      self.yaw_Q = 0.
      self.p_x = 0.
      self.p_y = 0.
      self.p_z = 0.
      self.vx_L = 0.
      self.vy_L = 0.
      self.vz_L = 0.
      self.p_Q = 0.
      self.q_Q = 0.
      self.r_Q = 0.
      self.w_x = 0.
      self.w_y = 0.
      self.w_z = 0.
      self.length = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_19d.pack(_x.x_L, _x.y_L, _x.z_L, _x.roll_Q, _x.pitch_Q, _x.yaw_Q, _x.p_x, _x.p_y, _x.p_z, _x.vx_L, _x.vy_L, _x.vz_L, _x.p_Q, _x.q_Q, _x.r_Q, _x.w_x, _x.w_y, _x.w_z, _x.length))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 152
      (_x.x_L, _x.y_L, _x.z_L, _x.roll_Q, _x.pitch_Q, _x.yaw_Q, _x.p_x, _x.p_y, _x.p_z, _x.vx_L, _x.vy_L, _x.vz_L, _x.p_Q, _x.q_Q, _x.r_Q, _x.w_x, _x.w_y, _x.w_z, _x.length,) = _struct_19d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_19d.pack(_x.x_L, _x.y_L, _x.z_L, _x.roll_Q, _x.pitch_Q, _x.yaw_Q, _x.p_x, _x.p_y, _x.p_z, _x.vx_L, _x.vy_L, _x.vz_L, _x.p_Q, _x.q_Q, _x.r_Q, _x.w_x, _x.w_y, _x.w_z, _x.length))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 152
      (_x.x_L, _x.y_L, _x.z_L, _x.roll_Q, _x.pitch_Q, _x.yaw_Q, _x.p_x, _x.p_y, _x.p_z, _x.vx_L, _x.vy_L, _x.vz_L, _x.p_Q, _x.q_Q, _x.r_Q, _x.w_x, _x.w_y, _x.w_z, _x.length,) = _struct_19d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_19d = struct.Struct("<19d")
